services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aiguardian-postgres
    environment:
      POSTGRES_DB: aiguardian
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - aiguardian-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aiguardian-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiguardian-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js API
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: aiguardian-api
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/aiguardian
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      ML_SERVICE_URL: http://ml:8001
      ML_SERVICE_API_KEY: demo-key
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aiguardian-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python ML Service
  ml:
    build:
      context: .
      dockerfile: ./apps/ml/Dockerfile
    container_name: aiguardian-ml
    ports:
      - "8001:8001"
    environment:
      PORT: 8001
      HOST: 0.0.0.0
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://postgres:5432/aiguardian
      ML_MODELS_PATH: /app/models
      LOG_LEVEL: info
    volumes:
      - ./apps/ml:/app
      - ml_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aiguardian-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Web App
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: aiguardian-web
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8000
      VITE_ML_SERVICE_URL: http://localhost:8001
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      api:
        condition: service_healthy
    networks:
      - aiguardian-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3-compatible storage for reports)
  minio:
    image: minio/minio:latest
    container_name: aiguardian-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - aiguardian-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  ml_models:
  minio_data:

networks:
  aiguardian-network:
    driver: bridge 